// Code generated by MockGen. DO NOT EDIT.
// Source: handlers/init.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	reflect "reflect"

	datatransfers "github.com/daystram/audit/audit-be/datatransfers"
	gomock "github.com/golang/mock/gomock"
)

// MockHandlerFunc is a mock of HandlerFunc interface.
type MockHandlerFunc struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerFuncMockRecorder
}

// MockHandlerFuncMockRecorder is the mock recorder for MockHandlerFunc.
type MockHandlerFuncMockRecorder struct {
	mock *MockHandlerFunc
}

// NewMockHandlerFunc creates a new mock instance.
func NewMockHandlerFunc(ctrl *gomock.Controller) *MockHandlerFunc {
	mock := &MockHandlerFunc{ctrl: ctrl}
	mock.recorder = &MockHandlerFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlerFunc) EXPECT() *MockHandlerFuncMockRecorder {
	return m.recorder
}

// ApplicationCreate mocks base method.
func (m *MockHandlerFunc) ApplicationCreate(applicationInfo datatransfers.ApplicationInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationCreate", applicationInfo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationCreate indicates an expected call of ApplicationCreate.
func (mr *MockHandlerFuncMockRecorder) ApplicationCreate(applicationInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCreate", reflect.TypeOf((*MockHandlerFunc)(nil).ApplicationCreate), applicationInfo)
}

// ApplicationDelete mocks base method.
func (m *MockHandlerFunc) ApplicationDelete(applicationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationDelete", applicationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationDelete indicates an expected call of ApplicationDelete.
func (mr *MockHandlerFuncMockRecorder) ApplicationDelete(applicationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationDelete", reflect.TypeOf((*MockHandlerFunc)(nil).ApplicationDelete), applicationID)
}

// ApplicationGetAll mocks base method.
func (m *MockHandlerFunc) ApplicationGetAll() ([]datatransfers.ApplicationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationGetAll")
	ret0, _ := ret[0].([]datatransfers.ApplicationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationGetAll indicates an expected call of ApplicationGetAll.
func (mr *MockHandlerFuncMockRecorder) ApplicationGetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationGetAll", reflect.TypeOf((*MockHandlerFunc)(nil).ApplicationGetAll))
}

// ApplicationGetOne mocks base method.
func (m *MockHandlerFunc) ApplicationGetOne(applicationID string) (datatransfers.ApplicationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationGetOne", applicationID)
	ret0, _ := ret[0].(datatransfers.ApplicationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationGetOne indicates an expected call of ApplicationGetOne.
func (mr *MockHandlerFuncMockRecorder) ApplicationGetOne(applicationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationGetOne", reflect.TypeOf((*MockHandlerFunc)(nil).ApplicationGetOne), applicationID)
}

// ApplicationUpdate mocks base method.
func (m *MockHandlerFunc) ApplicationUpdate(applicationInfo datatransfers.ApplicationInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationUpdate", applicationInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationUpdate indicates an expected call of ApplicationUpdate.
func (mr *MockHandlerFuncMockRecorder) ApplicationUpdate(applicationInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationUpdate", reflect.TypeOf((*MockHandlerFunc)(nil).ApplicationUpdate), applicationInfo)
}
