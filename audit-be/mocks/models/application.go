// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../audit-be/models/application.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	reflect "reflect"

	models "github.com/daystram/audit/audit-be/models"
	gomock "github.com/golang/mock/gomock"
)

// MockApplicationOrmer is a mock of ApplicationOrmer interface.
type MockApplicationOrmer struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationOrmerMockRecorder
}

// MockApplicationOrmerMockRecorder is the mock recorder for MockApplicationOrmer.
type MockApplicationOrmerMockRecorder struct {
	mock *MockApplicationOrmer
}

// NewMockApplicationOrmer creates a new mock instance.
func NewMockApplicationOrmer(ctrl *gomock.Controller) *MockApplicationOrmer {
	mock := &MockApplicationOrmer{ctrl: ctrl}
	mock.recorder = &MockApplicationOrmerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationOrmer) EXPECT() *MockApplicationOrmerMockRecorder {
	return m.recorder
}

// DeleteByID mocks base method.
func (m *MockApplicationOrmer) DeleteByID(ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockApplicationOrmerMockRecorder) DeleteByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockApplicationOrmer)(nil).DeleteByID), ID)
}

// GetAll mocks base method.
func (m *MockApplicationOrmer) GetAll() ([]models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockApplicationOrmerMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockApplicationOrmer)(nil).GetAll))
}

// GetOneByID mocks base method.
func (m *MockApplicationOrmer) GetOneByID(ID string) (models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByID", ID)
	ret0, _ := ret[0].(models.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByID indicates an expected call of GetOneByID.
func (mr *MockApplicationOrmerMockRecorder) GetOneByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByID", reflect.TypeOf((*MockApplicationOrmer)(nil).GetOneByID), ID)
}

// Insert mocks base method.
func (m *MockApplicationOrmer) Insert(application models.Application) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", application)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockApplicationOrmerMockRecorder) Insert(application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockApplicationOrmer)(nil).Insert), application)
}

// Update mocks base method.
func (m *MockApplicationOrmer) Update(application models.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", application)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockApplicationOrmerMockRecorder) Update(application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockApplicationOrmer)(nil).Update), application)
}
