// Code generated by MockGen. DO NOT EDIT.
// Source: models/service.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	reflect "reflect"

	models "github.com/daystram/audit/audit-be/models"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceOrmer is a mock of ServiceOrmer interface.
type MockServiceOrmer struct {
	ctrl     *gomock.Controller
	recorder *MockServiceOrmerMockRecorder
}

// MockServiceOrmerMockRecorder is the mock recorder for MockServiceOrmer.
type MockServiceOrmerMockRecorder struct {
	mock *MockServiceOrmer
}

// NewMockServiceOrmer creates a new mock instance.
func NewMockServiceOrmer(ctrl *gomock.Controller) *MockServiceOrmer {
	mock := &MockServiceOrmer{ctrl: ctrl}
	mock.recorder = &MockServiceOrmerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceOrmer) EXPECT() *MockServiceOrmerMockRecorder {
	return m.recorder
}

// DeleteByIDAndApplicationID mocks base method.
func (m *MockServiceOrmer) DeleteByIDAndApplicationID(ID, applicationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIDAndApplicationID", ID, applicationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIDAndApplicationID indicates an expected call of DeleteByIDAndApplicationID.
func (mr *MockServiceOrmerMockRecorder) DeleteByIDAndApplicationID(ID, applicationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIDAndApplicationID", reflect.TypeOf((*MockServiceOrmer)(nil).DeleteByIDAndApplicationID), ID, applicationID)
}

// GetAllByApplicationID mocks base method.
func (m *MockServiceOrmer) GetAllByApplicationID(applicationID string) ([]models.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByApplicationID", applicationID)
	ret0, _ := ret[0].([]models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByApplicationID indicates an expected call of GetAllByApplicationID.
func (mr *MockServiceOrmerMockRecorder) GetAllByApplicationID(applicationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByApplicationID", reflect.TypeOf((*MockServiceOrmer)(nil).GetAllByApplicationID), applicationID)
}

// GetOneByIDAndApplicationID mocks base method.
func (m *MockServiceOrmer) GetOneByIDAndApplicationID(ID, applicationID string) (models.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByIDAndApplicationID", ID, applicationID)
	ret0, _ := ret[0].(models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByIDAndApplicationID indicates an expected call of GetOneByIDAndApplicationID.
func (mr *MockServiceOrmerMockRecorder) GetOneByIDAndApplicationID(ID, applicationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByIDAndApplicationID", reflect.TypeOf((*MockServiceOrmer)(nil).GetOneByIDAndApplicationID), ID, applicationID)
}

// Insert mocks base method.
func (m *MockServiceOrmer) Insert(service models.Service) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", service)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockServiceOrmerMockRecorder) Insert(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockServiceOrmer)(nil).Insert), service)
}

// Update mocks base method.
func (m *MockServiceOrmer) Update(service models.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceOrmerMockRecorder) Update(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceOrmer)(nil).Update), service)
}
